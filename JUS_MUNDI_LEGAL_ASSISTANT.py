from langchain.schema import StrOutputParser
from langchain.prompts import ChatPromptTemplate
from langchain_openai import ChatOpenAI
from langchain_core.runnables import RunnableParallel, RunnableLambda
import os
from datetime import datetime
import uuid

os.environ["OPENAI_API_KEY"] = "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" 

# Initialize LLMs
llm1 = ChatOpenAI(model="gpt-4", temperature=0.9)
llm2 = ChatOpenAI(model="gpt-4", temperature=0.9)
llm3 = ChatOpenAI(model="gpt-4", temperature=0.9)

# Generate a unique session ID for this run
session_id = str(uuid.uuid4())[:8]
timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

def save_to_markdown(step_name, content, chain_name, user_query):
    """Save output to markdown file with metadata"""
    filename = f"markdown_outputs/{timestamp}_{session_id}_{chain_name}_{step_name}.md"
    
    markdown_content = f"""# {step_name.replace('_', ' ').title()}

## Metadata
- **Chain**: {chain_name}
- **Step**: {step_name}
- **Session ID**: {session_id}
- **Timestamp**: {datetime.now().isoformat()}
- **Original Query**: {user_query}

## Output

{content}

---
*Generated by LLM Chain Processor*
"""
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(markdown_content)
    
    print(f"✓ Saved {step_name} output to {filename}")
    return content

# Prompt templates with proper formatting
OPPOSITION_PROMPT = ChatPromptTemplate.from_template("""
# Context

You are a paralegal who is advising the lawyers of [plantiff] on the {case_objective} to provide a sound argument using the facts of the background details provided.

# Details

I'm working on a case representing Fenoscadia Limited, a mining company from Ticadia that was operating in Kronos under an 80-year concession to extract lindoro, a rare earth metal. In 2016, Kronos passed a decree that revoked Fenoscadia's license and terminated the concession agreement, citing environmental concerns. The government had funded a study that suggested lindoro mining contaminated the Rhea River and caused health issues, although the study didn't conclusively prove this. Kronos is now filing an environmental counterclaim in the ongoing arbitration, seeking at least USD 150 million for environmental damage, health costs, and water purification.

# Objective

- {case_objective}
- Present your argument in the format of IREAC
- Use sources from litigation, juls mundi and lawnet
- Provide sources and citations
- If you cannot answer the question, write: "I am sorry. I am a lousy AI, bopes"
- Do not make up an answer or give an answer that is not supported by the given context

# Style

Persuasive, structured, tribunal-ready

# Tone

Confident, precise, sharp and professional

# Audience

The arbitral tribunal

# Response

Provide a sound and convincing argument covering all the issues in the case and the applicable relevent rules and their justification

Issue

Rule

Explanation of Rule

Application of Rule

Case: {user_input}
""")

OPPOSITION_ARBITRATION = ChatPromptTemplate.from_template("""
# Context

You are an arbitration assistant who is offering advice to the lawyers of [plantiff] on their arguments of {case_objective} using the background, from the details

# Details

I'm working on a case representing Fenoscadia Limited, a mining company from Ticadia that was operating in Kronos under an 80-year concession to extract lindoro, a rare earth metal. In 2016, Kronos passed a decree that revoked Fenoscadia's license and terminated the concession agreement, citing environmental concerns. The government had funded a study that suggested lindoro mining contaminated the Rhea River and caused health issues, although the study didn't conclusively prove this. Kronos is now filing an environmental counterclaim in the ongoing arbitration, seeking at least USD 150 million for environmental damage, health costs, and water purification.

# Objective

- Present your advice in the format of IREAC
- Use sources from litigation, juls mundi and lawnet
- Provide sources and citations
- If you cannot answer the question, write: "I am sorry. I am a lousy AI, bopes"
- Do not make up an answer or give an answer that is not supported by the given context

# Style

Persuasive, structured, tribunal-ready

# Tone

Confident, precise, sharp and professional

# Audience

The arbitral tribunal

# Response

Analyse the argument given, identify the factual and legal weakneses and then provide an improved and convincing argument covering all the issues in the case and the applicable relevent rules and their justification

Issue

Rule

Explanation of Rule

Application of Rule

Previous Argument: {previous_argument}
""")

OPPOSITION_COUNTERARGUMENT = ChatPromptTemplate.from_template("""
Objective-
Analyse the arguments from the [opposition] and generate counter arguments for each of their arguments.

R — Response
Produce a 6–8 minute closing statement (800–1,000 words) that:
1. Opening / attention grabber
2. Core themes (2–4 key messages)
3. Fact summary (chronology, but only key highlights)
4. Legal arguments with rebuttals (organized by issue)
5. Persuasive highlights (fairness, good faith, proportionality)
6. Relief requested
7. Memorable closing line

Tone: Professional, clear, persuasive, suitable for oral delivery. 
Use short sentences and signposting (First, Second, Finally).
Do not invent facts or authorities—only rely on provided materials.
""")

PARALEGAL_PROMPT = ChatPromptTemplate.from_template("""
You are a paralegal who is advising the lawyers of [defendent] on the {case_objective} using the facts of the background details provided.

# Details

I'm working on a case representing Fenoscadia Limited, a mining company from Ticadia that was operating in Kronos under an 80-year concession to extract lindoro, a rare earth metal. In 2016, Kronos passed a decree that revoked Fenoscadia's license and terminated the concession agreement, citing environmental concerns. The government had funded a study that suggested lindoro mining contaminated the Rhea River and caused health issues, although the study didn't conclusively prove this. Kronos is now filing an environmental counterclaim in the ongoing arbitration, seeking at least USD 150 million for environmental damage, health costs, and water purification.

# Objective

- {case_objective}
- Present your argument in the format of IREAC
- Use sources from litigation, juls mundi and lawnet
- Provide sources and citations
- If you cannot answer the question, write: 'I am sorry. I am a lousy AI, bopes'
- Do not make up an answer or give an answer that is not supported by the given context

# Style

Persuasive, structured, tribunal-ready

# Tone

Confident, precise, sharp and professional

# Audience

The arbitral tribunal

# Response

Provide a sound and convincing argument covering all the issues in the case and the applicable relevent rules and their justification

Issue

Rule

Explanation of Rule

Application of Rule

Case: {user_input}
""")

PARALEGAL_ARBITRATION = ChatPromptTemplate.from_template("""
# Context

You are an arbitration assistant who is offering advice to the lawyers of [defendent] on their arguments of {case_objective} using the background, from the details

# Details

I'm working on a case representing Fenoscadia Limited, a mining company from Ticadia that was operating in Kronos under an 80-year concession to extract lindoro, a rare earth metal. In 2016, Kronos passed a decree that revoked Fenoscadia's license and terminated the concession agreement, citing environmental concerns. The government had funded a study that suggested lindoro mining contaminated the Rhea River and caused health issues, although the study didn't conclusively prove this. Kronos is now filing an environmental counterclaim in the ongoing arbitration, seeking at least USD 150 million for environmental damage, health costs, and water purification.

# Objective

- Present your advice in the format of IREAC
- Use sources from litigation, juls mundi and lawnet
- Provide sources and citations
- If you cannot answer the question, write: "I am sorry. I am a lousy AI, bopes"
- Do not make up an answer or give an answer that is not supported by the given context

# Style

Persuasive, structured, tribunal-ready

# Tone

Confident, precise, sharp and professional

# Audience

The arbitral tribunal

# Response

Analyse the argument given, identify the factual and legal weakneses and then provide an improved and convincing argument covering all the issues in the case and the applicable relevent rules and their justification

Issue

Rule

Explanation of Rule

Application of Rule

Previous Argument: {previous_argument}
""")

PARALEGAL_COUNTERARGUMENT = ChatPromptTemplate.from_template("""
Objective-
Analyse the arguments from the [plantiffs] and generate counter arguments for each of their arguments.

R — Response
Produce a 6–8 minute closing statement (800–1,000 words) that:
1. Opening / attention grabber
2. Core themes (2–4 key messages)
3. Fact summary (chronology, but only key highlights)
4. Legal arguments with rebuttals (organized by issue)
5. Persuasive highlights (fairness, good faith, proportionality)
6. Relief requested
7. Memorable closing line

Tone: Professional, clear, persuasive, suitable for oral delivery. 
Use short sentences and signposting (First, Second, Finally).
Do not invent facts or authorities—only rely on provided materials.
""")

# Create chain components with markdown saving
def create_chain_step(prompt_template, llm, step_name, chain_name, extra_vars=None):
    """Create a chain step that saves output to markdown"""
    def step_with_saving(input_data):
        if isinstance(input_data, dict):
            content = input_data
        else:
            content = {"input": input_data}
        
        # Add extra variables if provided
        if extra_vars:
            content.update(extra_vars)
        
        # Execute the chain step
        chain = prompt_template | llm | StrOutputParser()
        result = chain.invoke(content)
        
        # Save to markdown
        query_for_file = content.get('user_input', content.get('input', 'Unknown query'))
        if len(str(query_for_file)) > 100:
            query_for_file = str(query_for_file)[:100] + "..."
        
        save_to_markdown(step_name, result, chain_name, query_for_file)
        
        return result
    
    return step_with_saving

# Build Chain 1 with markdown saving
def chain1_processor(user_query):
    """Process Chain 1 with markdown output at each step"""
    # Save original query
    save_to_markdown("original_query", user_query, "chain1", user_query)
    
    # Extract case objective from user query
    case_objective = user_query if user_query else "defend against environmental counterclaim"
    
    # Step 1: Opposition Prompt
    step1 = create_chain_step(
        OPPOSITION_PROMPT, 
        llm1, 
        "step1_opposition_paralegal", 
        "chain1",
        {"user_input": user_query, "case_objective": case_objective}
    )
    result1 = step1(user_query)
    
    # Step 2: Opposition Arbitration
    step2 = create_chain_step(
        OPPOSITION_ARBITRATION, 
        llm1, 
        "step2_opposition_arbitration", 
        "chain1",
        {"previous_argument": result1, "case_objective": case_objective}
    )
    result2 = step2(result1)
    
    # Step 3: opposition counterargument
    step3 = create_chain_step(
        OPPOSITION_COUNTERARGUMENT, 
        llm2, 
        "step3_opposition_counterargument", 
        "chain1"
    )
    result3 = step3(result2)
    
    return result3

# Build Chain 2 with markdown saving
def chain2_processor(user_query):
    """Process Chain 2 with markdown output at each step"""
    # Save original query
    save_to_markdown("original_query", user_query, "chain2", user_query)
    
    # Extract case objective from user query
    case_objective = user_query if user_query else "defend against environmental counterclaim"
    
    # Step 1: Paralegal Prompt
    step1 = create_chain_step(
        PARALEGAL_PROMPT, 
        llm2, 
        "step1_paralegal_defense", 
        "chain2",
        {"user_input": user_query, "case_objective": case_objective}
    )
    result1 = step1(user_query)
    
    # Step 2: Paralegal Arbitration
    step2 = create_chain_step(
        PARALEGAL_ARBITRATION, 
        llm2, 
        "step2_paralegal_arbitration", 
        "chain2",
        {"previous_argument": result1, "case_objective": case_objective}
    )
    result2 = step2(result1)
    
    # Step 3: paralegal counterargument
    step3 = create_chain_step(
        PARALEGAL_COUNTERARGUMENT, 
        llm1, 
        "step3_paralegal_counterargument", 
        "chain2"
    )
    result3 = step3(result2)
    
    return result3

# Main execution function
def run_application(user_query):
    """Run both chains and save all outputs to markdown"""
    print(f"Starting processing for query: {user_query[:50]}...")
    print(f"Session ID: {session_id}")
    print("-" * 50)
    
    # Run both chains
    chain1_result = chain1_processor(user_query)
    chain2_result = chain2_processor(user_query)
    
    # Create a final balancer that combines both chains
    FINAL_BALANCER_PROMPT = ChatPromptTemplate.from_template(
"""You are co-counsel drafting a closing statement for arbitration. 
Using the case facts and arguments from both sides, prepare a persuasive 
closing statement structured as follows:

1. Opening / attention grabber
2. Core themes (2–4 key messages)
3. Fact summary (chronology, but only key highlights)
4. Legal arguments with rebuttals (organized by issue)
5. Persuasive highlights (fairness, good faith, proportionality)
6. Relief requested
7. Memorable closing line

Opposition Arguments: {chain1_output}
Defense Arguments: {chain2_output}

Tone: Professional, clear, persuasive, suitable for oral delivery. 
Use short sentences and signposting (First, Second, Finally).
Do not invent facts or authorities—only rely on provided materials.""")
    
    # Final balancing step
    final_balancer_chain = FINAL_BALANCER_PROMPT | llm3 | StrOutputParser()
    final_analysis = final_balancer_chain.invoke({
        "chain1_output": chain1_result,
        "chain2_output": chain2_result
    })
    
    # Save final analysis
    save_to_markdown("final_arbitration_analysis", final_analysis, "combined", user_query)
    
    # Save final results summary
    final_content = f"""
# Final Legal Analysis - Session {session_id}

C — Context
You are the Presiding Judge of an arbitral tribunal hearing the dispute between [plantiff] and [defendant]. [case objective]

O — Objective
Moderate the hearing firmly, test the persuasiveness of both sides, and deliver a final reasoned award.

S — Style
 • Judicial, structured, probing.
 • Neutral but not passive — actively question the credibility, evidence, and logic of each side.

T — Tone
 • Impartial, authoritative, analytical.
 • Willing to point out weak arguments on either side.

A — Audience
Both parties in arbitration ([plantiff] and [defendant]).

R — Response
 1. Open proceedings with a neutral summary of the dispute.
 2. After each closing statement, ask challenging questions that expose assumptions, evidence gaps, or logical weaknesses.
 3. Objectively assess the relative strength of each side's arguments.
 4. Issue a final award, structured around jurisdiction, admissibility, and merits, explaining not just the conclusion but why certain arguments were more persuasive than others.
Label outputs clearly as [Judge]:
"""
    
    final_filename = f"markdown_outputs/{timestamp}_{session_id}_FINAL_LEGAL_ANALYSIS.md"
    with open(final_filename, 'w', encoding='utf-8') as f:
        f.write(final_content)
    
    print(f"✓ Final results saved to {final_filename}")
    print("=" * 50)
    
    return {
        "chain1": chain1_result,
        "chain2": chain2_result,
        "final_analysis": final_analysis,
        "session_id": session_id,
        "timestamp": timestamp
    }

# Example usage
if __name__ == "__main__":
    user_input = input("Enter your arbitration case details or objective: ")
    if not user_input.strip():
        user_input = "Defend Fenoscadia Limited against Kronos' environmental counterclaim and argue for compensation for wrongful termination of concession agreement"
    
    results = run_application(user_input)
    
    print("\n✅ Legal Processing complete!")
    print(f"Chain 1 (Opposition) output length: {len(results['chain1'])} characters")
    print(f"Chain 2 (Defense) output length: {len(results['chain2'])} characters")
    print(f"Final Analysis length: {len(results['final_analysis'])} characters")
    print(f"Check the 'markdown_outputs' folder for detailed legal documents")
